@using Exam.Models;
@model Teacher
@{
    var IsEdit = ViewBag.IsEdit;
    var listTeacher = new List<Teacher>();
    listTeacher = (List<Teacher>)ViewBag.Teachers;
}

<style>
    #ddlColor select {
        color: black;
    }

        #ddlColor select option[value="#008000"] {
            background: #008000;
        }

        #ddlColor select option[value="#FFFF00"] {
            background: #FFFF00;
        }

        #ddlColor select option[value="#FF0000"] {
            background: #FF0000;
        }

        #ddlColor select option[value="#800080"] {
            background: #800080;
        }
</style>
<div class="modal fade" id="modalDetail" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                @if (IsEdit == false)
                {
                    <h5 class="modal-title">Add new teacher</h5>
                }
                else
                {
                    <h5 class="modal-title">Edit teacher</h5>
                }
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="formTeacher">
                    @Html.HiddenFor(s => s.Id)
                    @Html.AntiForgeryToken()
                    <div class="row form-group">
                        <div class="col-sm-3"><b>Name</b></div>
                        <div class="col-sm-9">
                            @Html.EditorFor(model => model.Teacher_Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Teacher_Name, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    <div class="row form-group">
                        <div class="col-sm-3"><b>Email</b></div>
                        <div class="col-sm-9">
                            @Html.EditorFor(model => model.Teacher_Email, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Teacher_Email, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row form-group">
                        <div class="col-sm-3"><b>ContactNo</b></div>
                        <div class="col-sm-9">
                            @Html.EditorFor(model => model.Teacher_ContactNo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Teacher_ContactNo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row form-group">
                        <div class="col-sm-3"><b>Department</b></div>
                        <div class="col-sm-9">
                            @Html.EditorFor(model => model.Teacher_Department, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Teacher_Department, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row form-group">
                        <div class="col-sm-3"><b>Address</b></div>
                        <div class="col-sm-9 " id="ddlColor">
                            @*@Html.EditorFor(model => model.Teacher_Address, new { htmlAttributes = new { @class = "form-control" } })*@

                            @Html.DropDownList("Teacher_Address", (List<SelectListItem>)ViewBag.Color, new { @class = "form-control" })


                            @*@Html.ValidationMessageFor(model => model.Teacher_Address, "", new { @class = "text-danger" })*@
                        </div>
                    </div>
                </form>


            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-default" data-dismiss="modal" onclick="close()">Đóng</button>
                @if (IsEdit == false)
                {
                    <button type="button" id="saveBtn" class="btn btn-success" onclick="save()"><i class="fa fa-save"></i> Thêm</button>
                }
                else
                {
                    <button type="button" id="saveBtn" class="btn btn-success" onclick="save()"><i class="fa fa-save"></i> Lưu</button>
                }
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

<script>
    $(function () {
        $("#saveBtn").attr("disabled", true);
        var original = $("#formTeacher").serialize();
        onFieldChange(original);


    });

    function onFieldChange(original) {
        $("#formTeacher :input").keyup(function () {
            var current = $("#formTeacher").serialize();
            $("#saveBtn").attr("disabled", true);
            if (original !== current)
                $("#saveBtn").attr("disabled", false);
        })
    }

    function save() {
        var url;
        if ( $("#Id").val() > 0) {
             url = "@Url.Action("Edit","Teacher")"
        }
        else {
             url = "@Url.Action("Create","Teacher")"
        }

        $.ajax({
            url: url,
            type: "POST",
            data: $("#formTeacher").serialize(),

            success: function (res) {
                if (res === true) {
                    $("#saveBtn").attr("disabled", true);
                    $("#modalDetail").modal("hide");
                    GetListTeacher();
                } else {
                    $("#saveBtn").attr("disabled", false);
                    alert("Save fail")
                }
            },
            error: function (xhr) {
                    alert("error");
                }
            });
    }
</script>
